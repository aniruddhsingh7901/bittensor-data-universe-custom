#!/usr/bin/env python3
"""
Setup script for Custom Twitter Integration with Bittensor
"""

import os
import sys
import subprocess
import json
from pathlib import Path

def print_header(text):
    print(f"\n{'='*60}")
    print(f"  {text}")
    print(f"{'='*60}")

def print_step(step, text):
    print(f"\n{step}. {text}")

def run_command(command, description):
    """Run a command and handle errors"""
    print(f"   Running: {command}")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"   ‚úÖ {description} completed successfully")
        return True
    except subprocess.CalledProcessError as e:
        print(f"   ‚ùå {description} failed: {e}")
        print(f"   Error output: {e.stderr}")
        return False

def check_dependencies():
    """Check if required dependencies are installed"""
    print_step(1, "Checking Dependencies")
    
    required_packages = [
        "fastapi",
        "uvicorn",
        "aiohttp",
        "psycopg2-binary",
        "pydantic"
    ]
    
    missing_packages = []
    
    for package in required_packages:
        try:
            __import__(package.replace('-', '_'))
            print(f"   ‚úÖ {package} is installed")
        except ImportError:
            print(f"   ‚ùå {package} is missing")
            missing_packages.append(package)
    
    if missing_packages:
        print(f"\n   Installing missing packages: {', '.join(missing_packages)}")
        install_cmd = f"pip install {' '.join(missing_packages)}"
        if run_command(install_cmd, "Package installation"):
            print("   ‚úÖ All dependencies installed")
        else:
            print("   ‚ùå Failed to install dependencies")
            return False
    
    return True

def setup_environment_variables():
    """Setup environment variables"""
    print_step(2, "Setting up Environment Variables")
    
    env_vars = {
        "CUSTOM_TWITTER_API_URL": "http://localhost:8000",
        "CUSTOM_TWITTER_API_TOKEN": "bittensor-custom-token-2024",
        "POSTGRES_DB": "bittensor_mining",
        "POSTGRES_USER": "postgres",
        "POSTGRES_PASSWORD": "postgres",
        "POSTGRES_HOST": "localhost",
        "POSTGRES_PORT": "5432",
        "SCRAPER_BATCH_SIZE": "500",
        "SCRAPER_BATCH_INTERVAL": "300",
        "SCRAPER_TWEETS_PER_HOUR": "1000"
    }
    
    # Create .env file
    env_file = Path(".env")
    with open(env_file, "w") as f:
        f.write("# Custom Twitter Integration Environment Variables\n")
        f.write("# Generated by setup_integration.py\n\n")
        
        for key, value in env_vars.items():
            f.write(f"{key}={value}\n")
            # Also set in current environment
            os.environ[key] = value
    
    print(f"   ‚úÖ Environment variables saved to {env_file}")
    print("   üìù You can modify these values in the .env file")
    
    return True

def check_custom_scraper():
    """Check if custom scraper is available"""
    print_step(3, "Checking Custom Scraper")
    
    scraper_path = "/home/anirudh/Downloads/twitter/X_scrapping"
    required_files = [
        "proxy_twitter_miner.py",
        "optimized_data_storage.py",
        "twitteracc.txt",
        "proxy.txt"
    ]
    
    if not os.path.exists(scraper_path):
        print(f"   ‚ùå Custom scraper directory not found: {scraper_path}")
        return False
    
    missing_files = []
    for file in required_files:
        file_path = os.path.join(scraper_path, file)
        if os.path.exists(file_path):
            print(f"   ‚úÖ {file} found")
        else:
            print(f"   ‚ùå {file} missing")
            missing_files.append(file)
    
    if missing_files:
        print(f"   ‚ùå Missing required files: {', '.join(missing_files)}")
        return False
    
    print("   ‚úÖ Custom scraper files are available")
    return True

def setup_database():
    """Setup PostgreSQL database"""
    print_step(4, "Setting up PostgreSQL Database")
    
    # Check if PostgreSQL is running
    if not run_command("pg_isready -h localhost -p 5432", "PostgreSQL connection check"):
        print("   ‚ö†Ô∏è  PostgreSQL might not be running. Attempting to start...")
        if not run_command("sudo systemctl start postgresql", "PostgreSQL start"):
            print("   ‚ùå Failed to start PostgreSQL. Please start it manually.")
            return False
    
    # Create database
    db_name = os.getenv("POSTGRES_DB", "bittensor_mining")
    create_db_cmd = f'sudo -u postgres createdb {db_name} 2>/dev/null || echo "Database might already exist"'
    run_command(create_db_cmd, f"Database {db_name} creation")
    
    # Test connection
    test_cmd = f'psql -h localhost -U postgres -d {db_name} -c "SELECT version();" > /dev/null 2>&1'
    if run_command(test_cmd, "Database connection test"):
        print("   ‚úÖ PostgreSQL database is ready")
        return True
    else:
        print("   ‚ùå Failed to connect to PostgreSQL database")
        return False

def create_systemd_services():
    """Create systemd service files"""
    print_step(5, "Creating Systemd Services")
    
    current_dir = os.getcwd()
    
    # Background scraper service
    scraper_service = f"""[Unit]
Description=Custom Twitter Background Scraper
After=network.target postgresql.service

[Service]
Type=simple
User={os.getenv('USER', 'ubuntu')}
WorkingDirectory={current_dir}
Environment=PATH={os.environ.get('PATH')}
EnvironmentFile={current_dir}/.env
ExecStart=/usr/bin/python3 {current_dir}/background_scraper_service.py
Restart=always
RestartSec=10

[Install]
WantedBy=multi-user.target
"""
    
    # API service
    api_service = f"""[Unit]
Description=Custom Twitter API Service
After=network.target

[Service]
Type=simple
User={os.getenv('USER', 'ubuntu')}
WorkingDirectory={current_dir}
Environment=PATH={os.environ.get('PATH')}
EnvironmentFile={current_dir}/.env
ExecStart=/usr/bin/python3 -m uvicorn custom_twitter_api_service:app --host 0.0.0.0 --port 8000
Restart=always
RestartSec=5

[Install]
WantedBy=multi-user.target
"""
    
    # Write service files
    services = [
        ("twitter-scraper.service", scraper_service),
        ("twitter-api.service", api_service)
    ]
    
    for service_name, service_content in services:
        service_path = f"/tmp/{service_name}"
        with open(service_path, "w") as f:
            f.write(service_content)
        
        # Copy to systemd directory
        copy_cmd = f"sudo cp {service_path} /etc/systemd/system/"
        if run_command(copy_cmd, f"Copy {service_name}"):
            print(f"   ‚úÖ {service_name} created")
        else:
            print(f"   ‚ùå Failed to create {service_name}")
    
    # Reload systemd
    if run_command("sudo systemctl daemon-reload", "Systemd reload"):
        print("   ‚úÖ Systemd services configured")
        return True
    else:
        print("   ‚ùå Failed to reload systemd")
        return False

def test_integration():
    """Test the integration"""
    print_step(6, "Testing Integration")
    
    # Test custom runner import
    try:
        sys.path.insert(0, os.getcwd())
        from scraping.custom_twitter_runner import CustomTwitterRunner
        runner = CustomTwitterRunner()
        print("   ‚úÖ Custom Twitter Runner import successful")
    except Exception as e:
        print(f"   ‚ùå Custom Twitter Runner import failed: {e}")
        return False
    
    # Test API service import
    try:
        import custom_twitter_api_service
        print("   ‚úÖ API Service import successful")
    except Exception as e:
        print(f"   ‚ùå API Service import failed: {e}")
        return False
    
    # Test background service import
    try:
        import background_scraper_service
        print("   ‚úÖ Background Service import successful")
    except Exception as e:
        print(f"   ‚ùå Background Service import failed: {e}")
        return False
    
    print("   ‚úÖ All components imported successfully")
    return True

def show_deployment_instructions():
    """Show deployment instructions"""
    print_header("DEPLOYMENT INSTRUCTIONS")
    
    print("""
üöÄ Your Custom Twitter Integration is ready!

NEXT STEPS:

1. START SERVICES:
   # Start API service
   sudo systemctl start twitter-api
   sudo systemctl enable twitter-api
   
   # Start background scraper
   sudo systemctl start twitter-scraper
   sudo systemctl enable twitter-scraper

2. CHECK STATUS:
   sudo systemctl status twitter-api
   sudo systemctl status twitter-scraper

3. VIEW LOGS:
   sudo journalctl -u twitter-api -f
   sudo journalctl -u twitter-scraper -f

4. TEST API:
   curl http://localhost:8000/
   curl -H "Authorization: Bearer bittensor-custom-token-2024" http://localhost:8000/api/stats

5. RUN BITTENSOR MINER:
   # Your miner will now use the custom scraper instead of Apify
   python -m neurons.miner --netuid 13

CONFIGURATION:
- Environment variables: .env
- API URL: http://localhost:8000
- API Token: bittensor-custom-token-2024
- Database: PostgreSQL (bittensor_mining)

MONITORING:
- API logs: /var/log/syslog (search for twitter-api)
- Scraper logs: background_scraper.log
- Database: psql -h localhost -U postgres -d bittensor_mining

COST SAVINGS:
- Apify costs: $100-500/month ‚Üí $0/month
- Your custom scraper: FREE! üéâ
""")

def main():
    """Main setup function"""
    print_header("CUSTOM TWITTER INTEGRATION SETUP")
    print("Setting up your custom Twitter scraper to replace Apify in Bittensor Data Universe")
    
    steps = [
        check_dependencies,
        setup_environment_variables,
        check_custom_scraper,
        setup_database,
        create_systemd_services,
        test_integration
    ]
    
    for step_func in steps:
        if not step_func():
            print(f"\n‚ùå Setup failed at step: {step_func.__name__}")
            print("Please fix the issues above and run the setup again.")
            sys.exit(1)
    
    print_header("SETUP COMPLETED SUCCESSFULLY! üéâ")
    show_deployment_instructions()

if __name__ == "__main__":
    main()
